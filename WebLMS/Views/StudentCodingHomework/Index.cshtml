@model WebLMS.Models.ViewModel.StudentCodingHomeworkViewModel

<h2>@Model.Subject</h2>
<hr />
<p>@Html.Raw(Model.Description)</p>
<hr />

<div class="row">
    <div class="col-md-12">
        <p>Попытки: <span id="attemptsCount">@Model.AttemptsCount</span>/<span id="maxAttemptsCount">@Model.MaxAttempts</span></p>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <form class="form-inline" id="sourceCodeForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="HomeworkId" />
            
            <div class="form-group col-md-12">
                <fieldset class="col-md-12">
                    <label asp-for="TemplateCode" class="control-label"></label>
                    <textarea rows="10" id="sourceCode" class="form-control col-md-12" style="min-width: 100%" asp-for="TemplateCode">
                    </textarea>
                    <span asp-validation-for="TemplateCode" class="text-danger"></span>
                </fieldset>
            </div>

            <div class="form-group">
                <button id="sendSourceCode" class="btn btn-primary"
                        @(Model.ExceededAttempts || Model.LastAttempt.IsPassed ? "disabled=true" : "")>
                    Отправить на проверку
                    <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                </button>
            </div>
        </form>
        <div id="lastAttempt">
            <br />
            <h5>Результат последней попытки: </h5>
            <div id="testResult">
                @{ await Html.RenderPartialAsync("_CodingTestResultView", Model.LastAttempt); }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    @{ await Html.RenderPartialAsync("SourceCodeScriptsPartial"); }
    <script>
        $('#sendSourceCode').click(function (e) {
            e.preventDefault();
            var sourceCode = editor.getValue();
            if (sourceCode.length < 20 || sourceCode.length > 10000) return;

            $("#sendSourceCode").attr("disabled", true);
            $("#sendSourceCode > .spinner-border").removeClass("d-none");
            $('#testResult')
                .load("/StudentCodingHomework/TestUserSourceCode", { "id": @Model.HomeworkId, "sourceCode": sourceCode },
                    function () {
                        $("#sendSourceCode").attr("disabled", false);
                        $("#sendSourceCode > .spinner-border").addClass("d-none");
                        var attemptsStr = $("#attemptsCount").text();
                        var attempts = parseInt(attemptsStr) + 1;
                        if (attempts >= @Model.MaxAttemptsCount && @Model.MaxAttemptsCount != 0) {
                            $("#sendSourceCode").attr("disabled", true);
                        }
                        $("#attemptsCount").text(attempts);
                    });
        });
    </script>
}
