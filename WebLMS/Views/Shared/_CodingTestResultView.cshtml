@using WebLMS.Models.ViewModel;
@model StudentCodingHomeworkResultViewModel


@if (@Model.IsTimedOut)
{
    <p>
        <span class="text-danger">Timeout</span>
        <br />
        Выполнение тестов или компиляция программы заняла больше @Model.TimeoutPeriod секунд
        <br />
        Пожалуйста просмотрите исходный код, возможно есть лишние или ненужные вызовы методов Console.ReadKey или Console.ReadLine
    </p>
}
else if (@Model.IsUnknownException)
{
    <p class="text-danger">Произошла <strong>ошибка</strong> во время выполнения. Отправьте текст ниже преподавателю:</p>
    <pre>
@Model.ExceptionText
    </pre>
}
else if (@Model.IsCompilationFailed)
{
    <p class="text-danger">Компиляция <strong>неуспешна</strong>, ошибки:</p>
    <pre>
@Model.CompilationErrors
    </pre>
}
else if (@Model.TestRunResults == null || !@Model.TestRunResults.Any())
{
    <p class="text-info">Нет результатов. 
    <br />
    Это либо первая попытка, либо для этого ДЗ нет тестов
    </p>
}
else
{
    @foreach (var run in @Model.TestRunResults)
    {
        @if (run.TestType == CodingTestType.Method)
        {
            <p>
                <h5><span class="badge @(run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Passed ? "badge-success" : "badge-danger")">@run.TestName is @run.TestRunStatus.ToString()</span></h5> 
                <b>Input parameters: </b>@string.Join(", ", run.InputParams)
                @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Failed)
                {
                    <br />
                    <span><b>Expected: </b>@run.Expected, <b>Actual: </b>@run.Actual</span>
                }
                else @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.TargetException)
                {
                    <br />
                    <span>There was an <strong>exception</strong> during execution of the test.</span>
                }
            </p>
        }
        else
        {            
            <h5><span class="badge @(run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Passed ? "badge-success" : "badge-danger")">@run.TestName is @run.TestRunStatus.ToString()</span></h5>
            @if (run.InputParams?.Any() ?? false)
            {
                <span>, Input parameters: @string.Join(", ", run.InputParams)</span>
            }

            @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Failed)
            {
                @if (run.StepResults.Count() == 1)
                {
                    var stepResult = run.StepResults.First();
                    @if (stepResult.Input?.Any() ?? false)
                    {
                        <span><b>Input</b> - [@string.Join(", ", stepResult.Input.Select(inp => $"\"{inp}\""))]; </span>
                    }

                    <span><b>Expected</b> - [@string.Join(", ", stepResult.Expected.Select(exp => $"\"{exp}\""))];</span>
                    <span><b>Actual</b> - [@string.Join(", ", stepResult.Actual.Select(act => $"\"{act}\""))];</span>
                }
                else
                { 
                    <ul>
                        @foreach (var stepResult in @run.StepResults)
                        {
                            <li>
                                @stepResult.Name is @(stepResult.IsPassed ? "Passed" : "Failed")
                                <br />
                                @if (stepResult.Input?.Any() ?? false)
                                {
                                    <span><b>Input</b> - [@string.Join(", ", stepResult.Input.Select(inp => $"\"{inp}\""))]; </span>
                                }
                                <span><b>Expected</b> - </span>[@string.Join(", ", stepResult.Expected.Select(exp => $"\"{exp}\""))];
                                <span><b>Actual</b> - </span>[@string.Join(", ", stepResult.Actual.Select(act => $"\"{act}\""))];
                            </li>
                        }
                    </ul>
                }
            }
            else @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.TargetException)
            {
                <br />
                <span>There was an <strong>exception</strong> during execution of the test.</span>
            }            
        }
    }
}