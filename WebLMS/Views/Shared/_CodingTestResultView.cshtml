@using WebLMS.Models.ViewModel;
@model StudentCodingHomeworkResultViewModel


@if (@Model.IsTimedOut)
{
    <p>
        <span class="text-danger">Timeout</span>
        <br />
        Выполнение тестов или компиляция программы заняла больше @Model.TimeoutPeriod секунд
        <br />
        Пожалуйста просмотрите исходный код, возможно есть лишние или ненужные вызовы методов Console.ReadKey или Console.ReadLine
    </p>
}
else if (@Model.IsUnknownException)
{
    <p class="text-danger">Произошла <strong>ошибка</strong> во время выполнения. Отправьте текст ниже преподавателю:</p>
    <pre>
@Model.ExceptionText
    </pre>
}
else if (@Model.IsCompilationFailed)
{
    <p class="text-danger">Компиляция <strong>неуспешна</strong>, ошибки:</p>
    <pre>
@Model.CompilationErrors
    </pre>
}
else if (@Model.TestRunResults == null || !@Model.TestRunResults.Any())
{
    <p class="text-info">Нет результатов. 
    <br />
    Это либо первая попытка, либо для этого ДЗ нет тестов
    </p>
}
else
{
    @foreach (var run in @Model.TestRunResults)
    {
        @if (run.TestType == CodingTestType.Method)
        {
            <p class="@(run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Passed ? "text-success" : "text-danger")">
                @run.TestName is <strong>@run.TestRunStatus.ToString()</strong>, 
                Input parameters: @string.Join(", ", run.InputParams)
                @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Failed)
                {
                    <br />
                    <span>Expected: @run.Expected, Actual: @run.Actual</span>
                }
                else @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.TargetException)
                {
                    <br />
                    <span>There was an <strong>exception</strong> during execution of the test.</span>
                }
            </p>
        }
        else
        {
            <p class="@(run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Passed ? "text-success" : "text-danger")">
                @run.TestName is <strong>@run.TestRunStatus.ToString()</strong>,
                Input parameters: @string.Join(", ", run.InputParams)
                @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.Failed)
                {
                    <br />
                    <span>Steps:</span>
                    <ul>
                        @foreach (var stepResult in @run.StepResults)
                        {
                            <li class="@(stepResult.IsPassed ? "text-success" : "text-danger")">
                                @stepResult.Name is @(stepResult.IsPassed ? "Passed" : "Failed")
                                Expected: (@string.Join(", ", stepResult.Expected)), Actual: (@string.Join(", ", stepResult.Actual))
                            </li>
                        }
                    </ul>
                }
                else @if (run.TestRunStatus == TestRunner.CommonTypes.TestRunStatus.TargetException)
                {
                    <br />
                    <span>There was an <strong>exception</strong> during execution of the test.</span>
                }
            </p>
        }
    }
}