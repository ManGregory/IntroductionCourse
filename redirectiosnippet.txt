var sb = new StringBuilder();
string s = test.InputParameters[0].ToString() + Environment.NewLine + test.InputParameters[0].ToString().Length.ToString() + Environment.NewLine;
using (StringWriter writer = new StringWriter(sb))
{
    using (StringReader reader = new StringReader(s))
    {
        Console.SetOut(writer);
        Console.SetIn(reader);
        result.ActualResult = testMethod.Invoke(null, test.InputParameters);
        $"Test: {test.Name}, input: {s}, output: {sb.ToString()}".WriteDebug();
    }
}


    public static class LoggingExtensions
    {
        static ReaderWriterLock locker = new ReaderWriterLock();
        public static void WriteDebug(this string text)
        {
            try
            {
                locker.AcquireWriterLock(int.MaxValue); //You might wanna change timeout value 
                System.IO.File.AppendAllLines(Path.Combine(Path.GetDirectoryName(System.Reflection.Assembly.GetExecutingAssembly().GetName().CodeBase).Replace("file:\\", ""), "debug.txt"), new[] { text });
            }
            finally
            {
                locker.ReleaseWriterLock();
            }
        }
    }
